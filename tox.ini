# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# Portions of this file are from tox-env/tox/tox.ini

[tox]
envlist = py36,
          py37,
          py38,
          coverage,
          fix_lint,
          safety
minversion = 3.12
skipsdist=True
skip_missing_interpreters = true

[testenv]
description = run tests
setenv =
    PIP_DISABLE_PIP_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
passenv =
    CURL_CA_BUNDLE
    http_proxy
    https_proxy
    no_proxy
    REQUESTS_CA_BUNDLE
    SSL_CERT_FILE
    PYTEST_*
    PIP_CACHE_DIR
deps =
    pip >= 19.3.1
    -rrequirements.txt
    virtualenv!=20.0.22
    pre-commit
    pytest
    pytest-aiohttp
    pytest-cov
    pytest-xdist
commands =
    pytest \
            --cov "." \
            --cov-config "{toxinidir}/tox.ini" \
            --junitxml {toxworkdir}/junit.{envname}.xml \
            -n={env:PYTEST_XDIST_PROC_NR:auto} \
            {posargs:.}

; [testenv:py38]
; description = run tests for Python 3.8 (no errors on warnings)
; commands =
;     coverage run -p -m pytest --tb=short tests

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = python3.8
passenv =
    {[testenv]passenv}
    # without PROGRAMDATA cloning using git for Windows will fail with an `error setting certificate verify locations` error
    PROGRAMDATA
    PRE_COMMIT_HOME
extras = lint
deps = pre-commit>=2
skip_install = True
commands = pre-commit run --all-files --show-diff-on-failure {posargs}
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       coverage >= 5.0.1
       diff_cover
skip_install = True
passenv = {[testenv]passenv}
          DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
commands = coverage combine
           coverage report -m
           coverage xml -o {toxworkdir}/coverage.xml
           coverage html -d {toxworkdir}/htmlcov
           diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml
depends = py36, py37, py38
parallel_show_output = True

[testenv:safety]
deps =
    safety
whitelist_externals=find
commands =
    safety check -r requirements.txt
    safety check -r requirements-dev.txt

[coverage:run]
branch = true
parallel = true
source = .
omit =
    *tests*
    *.tox*
    *venv*

[coverage:report]
skip_covered = True
show_missing = True
exclude_lines =
    \#\s*pragma: no cover
    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*return NotImplemented\b
    ^\s*raise$
    ^if __name__ == ['"]__main__['"]:$

[coverage:paths]
source = app

[pytest]
addopts = -ra --showlocals
rsyncdirs = app tests
looponfailroots = tests app
testpaths = tests
xfail_strict = True
markers =
    git
    network
